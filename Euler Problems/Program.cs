using System;
using System.Collections.Generic;
using System.Numerics;

namespace Euler.Problems
{
    class Program
    {
        /// <summary>
        /// https://projecteuler.net/archives solutions
        /// </summary>

        static void Main(string[] args)
        {
            Problem8();
        }

        #region First 10
        static void Problem1()
        {
            //If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
            //Find the sum of all the multiples of 3 or 5 below 1000.

            int total = 0;
            for (int x = 0; x < 1000; x++)
            {
                if (x % 3 == 0 || x % 5 == 0)
                {
                    total += x;
                }
            }
            Console.WriteLine(total);
        }
        static void Problem2()
        {
            //Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
            //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
            //By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

            int total = 0;
            int next = 1;
            int prev = 1;

            for (int x = 1; x < 4000000;)
            {
                next = x + prev;
                prev = x;
                x = next;

                if (x % 2 == 0)
                {
                    total += x;
                }
            }
            Console.WriteLine(total);
        }

        static void Problem3()
        {
            //The prime factors of 13195 are 5, 7, 13 and 29.
            //What is the largest prime factor of the number 600851475143?

            long total = 600851475143;
            long morbiggest = 2; //Biggest prime factor
            int ඞ = 2; //Number we are checking if is a (prime) factor

            while (ඞ < total)
            {
                if (total % ඞ == 0)
                {
                    total = total / ඞ;
                    ඞ = 2;
                }
                ඞ++;

                morbiggest = Math.Max((int)ඞ, (int)morbiggest);

            }
            Console.WriteLine(morbiggest);
            //The smallest factor of a number will always be a prime factor
            //We find the smallest factor of the number, divide it to get a new total and store that factor if it bigger than the previous factor   
            //this repeats until the factor being tested >= total
        }
        static void Problem4()
        {
            //A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
            //Find the largest palindrome made from the product of two 3 - digit numbers

            for (int a = 999; a > 100; a--)
            {
                for (int b = 999; b > 100; b--)
                {
                    string result = (a * b).ToString();
                    int half = (result.Length / 2);
                    int length = result.Length;
                    char[] str2 = result.Substring(half, length - half).ToCharArray();
                    Array.Reverse(str2);
                    string str = new string(str2);

                    if (result.Substring(0, half) == str)
                    {
                        Console.WriteLine(a * b);
                    }
                }
            }
            #endregion
        }
        static void Problem4ButBetter()
        {
            //A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
            //Find the largest palindrome made from the product of two 3 - digit numbers

            for (int a = 999; a > 100; a--)
            {
                for (int b = 999; b > 100; b--)
                {
                    string result = (a * b).ToString();
                    char[] temp = result.ToCharArray();
                    temp.Reverse();
                    string str = new string(temp);

                    if (result == str)
                    {
                        Console.WriteLine(a * b);
                    }
                }
            }
        }
        
        static void Problem5()
        {
            //2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
            //What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20 ?

            bool found = false;
            int result = 0;
            for (int x = 20; !found; x += 20)
            {
                for (int i = 3; i<20; i++)
                {
                    if (x % i != 0)
                    {
                        found = false;
                        break;
                    }
                    else
                    {
                        result = x;
                        found = true;
                    }
                }
            }
            Console.WriteLine(result);

            //Every iteration of the loop increases the number being checked by 20
            //For each number, we divide by every number between 3 and 19 (0, 1, 2 and 20 are always factors)
            //If any of the numbers result in a remainder, we move on to the next number
        }
        static void Problem6()
        {
            //The sum of the squares of the first ten natural numbers is 285,
            //The square of the sum of the first ten natural numbers is 3025,
            //Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 2640.
            //Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum. 

            int sumsquare = 0;
            int squaresum = 0;

            for (int x = 1; x < 101; x++)
            {
                sumsquare = sumsquare + (x*x);
                Console.WriteLine(x + "     " + sumsquare);

            }

            for (int y = 1; y < 101; y++)
            {
                squaresum = squaresum + y;
                Console.WriteLine(y+"       "+squaresum);

            }
            squaresum = squaresum * squaresum;

            
            
            Console.WriteLine(squaresum - sumsquare);

            //im not commenting this lol
        }

        static void Problem7()
        {
            //By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
            //What is the 10001st prime number ?

            int count = 0;
            int num = 4;
            bool valid = false;
            

            for (count = 2; count < 10001; num++)
            {
                for (int y = 2; y < num; y++)
                {
                    valid = true;
                    if (num % y == 0)
                    {
                        valid = false;
                        break;
                    }
                }
                if (valid)
                {
                    //Console.WriteLine(num);
                    count++;
                }
            }
            Console.WriteLine(count);
            Console.WriteLine(num-1);
        }
        static void Problem8()
        {
            //The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
            //Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
            string number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088" +
                "0551112540698747158523863050715693290963295227443043557668966489504452445231617318564030987111217223831136222989342338030813533627661428280644448664523874930" +
                "3589072962904915604407723907138105158593079608667017242712188399879790879227492190169972088809377665727333001053367881220235421809751254540594752243525849077" +
                "1167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319" +
                "9890008895243450658541227588666881164271714799244429282308634656748139191231628245861786645835912456652947654568284891288314260769004224219022671055626321111" +
                "1093705442175069416589604080719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606058861164671094050775410022569" +
                "8315520005593572972571636269561882670428252483600823257530420752963450";
            
            long total = 1;
            string check = "";
            foreach (char x in number)
            {
                if (check.Length < 14)
                {
                    check += x;
                }
                else
                {
                    break;
                }
            }
            foreach (char y in check)
            {
                if (y != '0')
                {
                    total = total * Convert.ToInt32(y);
                }
            }
            Console.WriteLine(total);
        }
    }
}