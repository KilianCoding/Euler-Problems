using System;
using System.Collections.Generic;
using System.Numerics;

namespace Euler.Problems
{
    class Program
    {
        /// <summary>
        /// https://projecteuler.net/archives solutions
        /// </summary>

        static void Main(string[] args)
        {
            Problem3();
        }

        #region First 10
        static void Problem1()
        {
            //If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
            //Find the sum of all the multiples of 3 or 5 below 1000.

            int total = 0;
            for (int x=0; x < 1000; x++)
            {
                if (x % 3 == 0 || x % 5 == 0)
                {
                    total += x;
                }
            }
            Console.WriteLine(total);
        }
        static void Problem2()
        {
            //Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
            //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
            //By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

            int total = 0;
            int next = 1;
            int prev = 1;

            for (int x = 1; x < 4000000;)
            {
                next = x + prev;
                prev = x;
                x = next;

                if (x % 2 == 0)
                {
                    total += x;
                }
            }
            Console.WriteLine(total);
        }
        
        static void Problem3()
        {
            //The prime factors of 13195 are 5, 7, 13 and 29.
            //What is the largest prime factor of the number 600851475143?

            long total = 600851475143;
            long morbiggest = 2; //Biggest prime factor
            int ඞ = 2; //Number we are checking if is a (prime) factor
            
            while (ඞ < total)
            {
                if (total % ඞ == 0)
                {
                    total = total / ඞ;
                    ඞ = 2;
                }
                ඞ++;

                morbiggest = Math.Max((int)ඞ, (int)morbiggest);
                
            }
            Console.WriteLine(morbiggest);
            //The smallest factor of a number will always be a prime factor
            //We find the smallest factor of the number, divide it to get a new total and store that factor if it bigger than the previous factor   
            //this repeats until the factor being tested >= total
        }
        #endregion
        static void Problem4()
        {
            //A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
            //Find the largest palindrome made from the product of two 3 - digit numbers

        }
    }
}